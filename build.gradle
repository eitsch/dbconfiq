/*
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

buildscript {

  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  
  dependencies {
    classpath 'gradle.plugin.edu.sc.seis.gradle:launch4j:2.1.0'
  }
}

plugins {
  id 'edu.sc.seis.launch4j' version '2.1.0'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

sourceSets {
	main {
		java {
			srcDirs "src/main/java"
		}
	}
	
	test {
        java {
        	srcDir 'src/test/java'
        }
    }
}

launch4j {
  mainClassName = 'eitsch.dbtool.dbconfiq.gui.ApplicationWindow'
  icon = "${projectDir}/src/main/resources/icons/HUDEdit_Icon.ico"
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
	
    maven {
	    // SWT - JAR --> https://github.com/maven-eclipse/maven-eclipse.github.io
    	url "http://maven-eclipse.github.io/maven"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
	compile group: 'ch.qos.logback', name:'logback-classic', version: '1.0.9'
    compile group: 'ch.qos.logback', name:'logback-core', version: '1.0.9'
    
	compile "org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.6.1"
	
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

test {
	outputs.upToDateWhen { false }
	testLogging.showStandardStreams = true
	include '**/Test*.*'
	testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
